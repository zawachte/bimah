// Package Bimah provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"github.com/gin-gonic/gin"
	"net/http"
	"fmt"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Returns a list of all fleets
	// (GET /fleet)
	GetFleet(c *gin.Context)
	// Create an fleet
	// (POST /fleet)
	PostFleet(c *gin.Context)
	// Delete fleet with fleet id
	// (DELETE /fleet/{id})
	DeleteFleetId(c *gin.Context, id int)
	// Get fleet with specific id
	// (GET /fleet/{id})
	GetFleetId(c *gin.Context, id int)
	// Returns a list of all paths
	// (GET /path)
	GetPath(c *gin.Context)
	// Create an path
	// (POST /path)
	PostPath(c *gin.Context)
	// Delete Path with path id
	// (DELETE /path/{id})
	DeletePathId(c *gin.Context, id int)
	// Get account with specific id
	// (GET /path/{id})
	GetPathId(c *gin.Context, id int)
	// Returns a list of all rules
	// (GET /rule)
	GetRule(c *gin.Context)
	// Create a rule
	// (POST /rule)
	PostRule(c *gin.Context)
	// Delete rule with specific id
	// (DELETE /rule/{id})
	DeleteRuleId(c *gin.Context, id int)
	// Get rule with specific id
	// (GET /rule/{id})
	GetRuleId(c *gin.Context, id int)
	// Returns a list of all tlsconfig
	// (GET /tlsconfig)
	GetTlsconfig(c *gin.Context)
	// Create an tlsconfig
	// (POST /tlsconfig)
	PostTlsconfig(c *gin.Context)
	// Delete tlsconfig with tlsconfig id
	// (DELETE /tlsconfig/{id})
	DeleteTlsconfigId(c *gin.Context, id int)
	// Get tlsconfig with specific id
	// (GET /tlsconfig/{id})
	GetTlsconfigId(c *gin.Context, id int)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
}

type MiddlewareFunc func(c *gin.Context)

// GetFleet operation middleware
func (siw *ServerInterfaceWrapper) GetFleet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetFleet(c)
}

// PostFleet operation middleware
func (siw *ServerInterfaceWrapper) PostFleet(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostFleet(c)
}

// DeleteFleetId operation middleware
func (siw *ServerInterfaceWrapper) DeleteFleetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteFleetId(c, id)
}

// GetFleetId operation middleware
func (siw *ServerInterfaceWrapper) GetFleetId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetFleetId(c, id)
}

// GetPath operation middleware
func (siw *ServerInterfaceWrapper) GetPath(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPath(c)
}

// PostPath operation middleware
func (siw *ServerInterfaceWrapper) PostPath(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostPath(c)
}

// DeletePathId operation middleware
func (siw *ServerInterfaceWrapper) DeletePathId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeletePathId(c, id)
}

// GetPathId operation middleware
func (siw *ServerInterfaceWrapper) GetPathId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetPathId(c, id)
}

// GetRule operation middleware
func (siw *ServerInterfaceWrapper) GetRule(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRule(c)
}

// PostRule operation middleware
func (siw *ServerInterfaceWrapper) PostRule(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostRule(c)
}

// DeleteRuleId operation middleware
func (siw *ServerInterfaceWrapper) DeleteRuleId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteRuleId(c, id)
}

// GetRuleId operation middleware
func (siw *ServerInterfaceWrapper) GetRuleId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetRuleId(c, id)
}

// GetTlsconfig operation middleware
func (siw *ServerInterfaceWrapper) GetTlsconfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTlsconfig(c)
}

// PostTlsconfig operation middleware
func (siw *ServerInterfaceWrapper) PostTlsconfig(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.PostTlsconfig(c)
}

// DeleteTlsconfigId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTlsconfigId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.DeleteTlsconfigId(c, id)
}

// GetTlsconfigId operation middleware
func (siw *ServerInterfaceWrapper) GetTlsconfigId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameter("simple", false, "id", c.Param("id"), &id)
	if err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"msg": fmt.Sprintf("Invalid format for parameter id: %s", err)})
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
	}

	siw.Handler.GetTlsconfigId(c, id)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router *gin.Engine, si ServerInterface) *gin.Engine {
	return RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router *gin.Engine, si ServerInterface, options GinServerOptions) *gin.Engine {
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
	}

	router.GET(options.BaseURL+"/fleet", wrapper.GetFleet)

	router.POST(options.BaseURL+"/fleet", wrapper.PostFleet)

	router.DELETE(options.BaseURL+"/fleet/:id", wrapper.DeleteFleetId)

	router.GET(options.BaseURL+"/fleet/:id", wrapper.GetFleetId)

	router.GET(options.BaseURL+"/path", wrapper.GetPath)

	router.POST(options.BaseURL+"/path", wrapper.PostPath)

	router.DELETE(options.BaseURL+"/path/:id", wrapper.DeletePathId)

	router.GET(options.BaseURL+"/path/:id", wrapper.GetPathId)

	router.GET(options.BaseURL+"/rule", wrapper.GetRule)

	router.POST(options.BaseURL+"/rule", wrapper.PostRule)

	router.DELETE(options.BaseURL+"/rule/:id", wrapper.DeleteRuleId)

	router.GET(options.BaseURL+"/rule/:id", wrapper.GetRuleId)

	router.GET(options.BaseURL+"/tlsconfig", wrapper.GetTlsconfig)

	router.POST(options.BaseURL+"/tlsconfig", wrapper.PostTlsconfig)

	router.DELETE(options.BaseURL+"/tlsconfig/:id", wrapper.DeleteTlsconfigId)

	router.GET(options.BaseURL+"/tlsconfig/:id", wrapper.GetTlsconfigId)

	return router
}

